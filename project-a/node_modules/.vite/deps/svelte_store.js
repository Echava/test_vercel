import {
  derived,
  get as get2,
  readable,
  readonly,
  writable
} from "./chunk-QPREJQZC.js";
import {
  effect_root,
  effect_tracking,
  get,
  render_effect,
  set,
  source,
  tick
} from "./chunk-GJOLH4ZF.js";
import "./chunk-UUM4N7O4.js";
import "./chunk-NT4IM65S.js";
import "./chunk-NFWMW7N6.js";
import {
  noop
} from "./chunk-2GO4TZ74.js";
import "./chunk-HPRLEMBT.js";

// node_modules/svelte/src/reactivity/utils.js
function increment(source2) {
  set(source2, source2.v + 1);
}

// node_modules/svelte/src/store/index-client.js
function toStore(get3, set2) {
  const store = writable(get3(), (set3) => {
    let ran = false;
    const teardown = effect_root(() => {
      render_effect(() => {
        const value = get3();
        if (ran) set3(value);
      });
    });
    ran = true;
    return teardown;
  });
  if (set2) {
    return {
      set: set2,
      update: (fn) => set2(fn(get3())),
      subscribe: store.subscribe
    };
  }
  return {
    subscribe: store.subscribe
  };
}
function fromStore(store) {
  let value = (
    /** @type {V} */
    void 0
  );
  let version = source(0);
  let subscribers = 0;
  let unsubscribe = noop;
  function current() {
    if (effect_tracking()) {
      get(version);
      render_effect(() => {
        if (subscribers === 0) {
          let ran = false;
          unsubscribe = store.subscribe((v) => {
            value = v;
            if (ran) increment(version);
          });
          ran = true;
        }
        subscribers += 1;
        return () => {
          subscribers -= 1;
          tick().then(() => {
            if (subscribers === 0) {
              unsubscribe();
            }
          });
        };
      });
      return value;
    }
    return get2(store);
  }
  if ("set" in store) {
    return {
      get current() {
        return current();
      },
      set current(v) {
        store.set(v);
      }
    };
  }
  return {
    get current() {
      return current();
    }
  };
}
export {
  derived,
  fromStore,
  get2 as get,
  readable,
  readonly,
  toStore,
  writable
};
//# sourceMappingURL=svelte_store.js.map
