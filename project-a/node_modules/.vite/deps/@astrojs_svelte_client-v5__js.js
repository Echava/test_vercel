import "./chunk-ZZGUHUS6.js";
import {
  createRawSnippet
} from "./chunk-WHK5PK2E.js";
import {
  hydrate,
  mount,
  unmount
} from "./chunk-2Y3ETZFB.js";
import "./chunk-7AEQXN7F.js";
import "./chunk-VWJCU25H.js";
import "./chunk-ECHV7LBW.js";
import "./chunk-GJOLH4ZF.js";
import "./chunk-UUM4N7O4.js";
import "./chunk-NT4IM65S.js";
import "./chunk-NFWMW7N6.js";
import "./chunk-2GO4TZ74.js";
import "./chunk-HPRLEMBT.js";

// node_modules/@astrojs/svelte/client-v5.js
var existingApplications = /* @__PURE__ */ new WeakMap();
var client_v5_default = (element) => {
  return async (Component, props, slotted, { client }) => {
    if (!element.hasAttribute("ssr")) return;
    let children = void 0;
    let $$slots = void 0;
    for (const [key, value] of Object.entries(slotted)) {
      $$slots ?? ($$slots = {});
      if (key === "default") {
        $$slots.default = true;
        children = createRawSnippet(() => ({
          render: () => `<astro-slot>${value}</astro-slot>`
        }));
      } else {
        $$slots[key] = createRawSnippet(() => ({
          render: () => `<astro-slot name="${key}">${value}</astro-slot>`
        }));
      }
    }
    const bootstrap = client !== "only" ? hydrate : mount;
    if (existingApplications.has(element)) {
      existingApplications.get(element).$set({
        ...props,
        children,
        $$slots
      });
    } else {
      const component = bootstrap(Component, {
        target: element,
        props: {
          ...props,
          children,
          $$slots
        }
      });
      existingApplications.set(element, component);
      element.addEventListener("astro:unmount", () => unmount(component), { once: true });
    }
  };
};
export {
  client_v5_default as default
};
//# sourceMappingURL=@astrojs_svelte_client-v5__js.js.map
