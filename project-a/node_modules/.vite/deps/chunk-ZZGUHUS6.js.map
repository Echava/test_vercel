{
  "version": 3,
  "sources": ["../../svelte/src/index-client.js"],
  "sourcesContent": ["/** @import { ComponentContext, ComponentContextLegacy } from '#client' */\r\n/** @import { EventDispatcher } from './index.js' */\r\n/** @import { NotFunction } from './internal/types.js' */\r\nimport { component_context, flush_sync, untrack } from './internal/client/runtime.js';\r\nimport { is_array } from './internal/shared/utils.js';\r\nimport { user_effect } from './internal/client/index.js';\r\nimport * as e from './internal/client/errors.js';\r\nimport { lifecycle_outside_component } from './internal/shared/errors.js';\r\n\r\n/**\r\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\r\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\r\n * it can be called from an external module).\r\n *\r\n * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.\r\n *\r\n * `onMount` does not run inside a [server-side component](https://svelte.dev/docs#run-time-server-side-component-api).\r\n *\r\n * @template T\r\n * @param {() => NotFunction<T> | Promise<NotFunction<T>> | (() => any)} fn\r\n * @returns {void}\r\n */\r\nexport function onMount(fn) {\r\n\tif (component_context === null) {\r\n\t\tlifecycle_outside_component('onMount');\r\n\t}\r\n\r\n\tif (component_context.l !== null) {\r\n\t\tinit_update_callbacks(component_context).m.push(fn);\r\n\t} else {\r\n\t\tuser_effect(() => {\r\n\t\t\tconst cleanup = untrack(fn);\r\n\t\t\tif (typeof cleanup === 'function') return /** @type {() => void} */ (cleanup);\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Schedules a callback to run immediately before the component is unmounted.\r\n *\r\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\r\n * only one that runs inside a server-side component.\r\n *\r\n * @param {() => any} fn\r\n * @returns {void}\r\n */\r\nexport function onDestroy(fn) {\r\n\tif (component_context === null) {\r\n\t\tlifecycle_outside_component('onDestroy');\r\n\t}\r\n\r\n\tonMount(() => () => untrack(fn));\r\n}\r\n\r\n/**\r\n * @template [T=any]\r\n * @param {string} type\r\n * @param {T} [detail]\r\n * @param {any}params_0\r\n * @returns {CustomEvent<T>}\r\n */\r\nfunction create_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\r\n\treturn new CustomEvent(type, { detail, bubbles, cancelable });\r\n}\r\n\r\n/**\r\n * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs#template-syntax-component-directives-on-eventname).\r\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\r\n *\r\n * Component events created with `createEventDispatcher` create a\r\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\r\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\r\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\r\n * property and can contain any type of data.\r\n *\r\n * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\r\n * ```ts\r\n * const dispatch = createEventDispatcher<{\r\n *  loaded: never; // does not take a detail argument\r\n *  change: string; // takes a detail argument of type string, which is required\r\n *  optional: number | null; // takes an optional detail argument of type number\r\n * }>();\r\n * ```\r\n *\r\n * @deprecated Use callback props and/or the `$host()` rune instead — see https://svelte-5-preview.vercel.app/docs/deprecations#createeventdispatcher\r\n * @template {Record<string, any>} [EventMap = any]\r\n * @returns {EventDispatcher<EventMap>}\r\n */\r\nexport function createEventDispatcher() {\r\n\tconst active_component_context = component_context;\r\n\tif (active_component_context === null) {\r\n\t\tlifecycle_outside_component('createEventDispatcher');\r\n\t}\r\n\r\n\treturn (type, detail, options) => {\r\n\t\tconst events = /** @type {Record<string, Function | Function[]>} */ (\r\n\t\t\tactive_component_context.s.$$events\r\n\t\t)?.[/** @type {any} */ (type)];\r\n\r\n\t\tif (events) {\r\n\t\t\tconst callbacks = is_array(events) ? events.slice() : [events];\r\n\t\t\t// TODO are there situations where events could be dispatched\r\n\t\t\t// in a server (non-DOM) environment?\r\n\t\t\tconst event = create_custom_event(/** @type {string} */ (type), detail, options);\r\n\t\t\tfor (const fn of callbacks) {\r\n\t\t\t\tfn.call(active_component_context.x, event);\r\n\t\t\t}\r\n\t\t\treturn !event.defaultPrevented;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n}\r\n\r\n// TODO mark beforeUpdate and afterUpdate as deprecated in Svelte 6\r\n\r\n/**\r\n * Schedules a callback to run immediately before the component is updated after any state change.\r\n *\r\n * The first time the callback runs will be before the initial `onMount`.\r\n *\r\n * In runes mode use `$effect.pre` instead.\r\n *\r\n * @deprecated Use `$effect.pre` instead — see https://svelte-5-preview.vercel.app/docs/deprecations#beforeupdate-and-afterupdate\r\n * @param {() => void} fn\r\n * @returns {void}\r\n */\r\nexport function beforeUpdate(fn) {\r\n\tif (component_context === null) {\r\n\t\tlifecycle_outside_component('beforeUpdate');\r\n\t}\r\n\r\n\tif (component_context.l === null) {\r\n\t\te.lifecycle_legacy_only('beforeUpdate');\r\n\t}\r\n\r\n\tinit_update_callbacks(component_context).b.push(fn);\r\n}\r\n\r\n/**\r\n * Schedules a callback to run immediately after the component has been updated.\r\n *\r\n * The first time the callback runs will be after the initial `onMount`.\r\n *\r\n * In runes mode use `$effect` instead.\r\n *\r\n * @deprecated Use `$effect` instead — see https://svelte-5-preview.vercel.app/docs/deprecations#beforeupdate-and-afterupdate\r\n * @param {() => void} fn\r\n * @returns {void}\r\n */\r\nexport function afterUpdate(fn) {\r\n\tif (component_context === null) {\r\n\t\tlifecycle_outside_component('afterUpdate');\r\n\t}\r\n\r\n\tif (component_context.l === null) {\r\n\t\te.lifecycle_legacy_only('afterUpdate');\r\n\t}\r\n\r\n\tinit_update_callbacks(component_context).a.push(fn);\r\n}\r\n\r\n/**\r\n * Legacy-mode: Init callbacks object for onMount/beforeUpdate/afterUpdate\r\n * @param {ComponentContext} context\r\n */\r\nfunction init_update_callbacks(context) {\r\n\tvar l = /** @type {ComponentContextLegacy} */ (context).l;\r\n\treturn (l.u ??= { a: [], b: [], m: [] });\r\n}\r\n\r\n/**\r\n * Synchronously flushes any pending state changes and those that result from it.\r\n * @param {() => void} [fn]\r\n * @returns {void}\r\n */\r\nexport function flushSync(fn) {\r\n\tflush_sync(fn);\r\n}\r\n\r\nexport { hydrate, mount, unmount } from './internal/client/render.js';\r\n\r\nexport {\r\n\tgetContext,\r\n\tgetAllContexts,\r\n\thasContext,\r\n\tsetContext,\r\n\ttick,\r\n\tuntrack\r\n} from './internal/client/runtime.js';\r\n\r\nexport { createRawSnippet } from './internal/client/dom/blocks/snippet.js';\r\n"],
  "mappings": ";;;;;;;;;;;;;;;AAsBO,SAAS,QAAQ,IAAI;AAC3B,MAAI,sBAAsB,MAAM;AAC/B,gCAA4B,SAAS;AAAA,EACtC;AAEA,MAAI,kBAAkB,MAAM,MAAM;AACjC,0BAAsB,iBAAiB,EAAE,EAAE,KAAK,EAAE;AAAA,EACnD,OAAO;AACN,gBAAY,MAAM;AACjB,YAAM,UAAU,QAAQ,EAAE;AAC1B,UAAI,OAAO,YAAY,WAAY;AAAA;AAAA,QAAkC;AAAA;AAAA,IACtE,CAAC;AAAA,EACF;AACD;AAWO,SAAS,UAAU,IAAI;AAC7B,MAAI,sBAAsB,MAAM;AAC/B,gCAA4B,WAAW;AAAA,EACxC;AAEA,UAAQ,MAAM,MAAM,QAAQ,EAAE,CAAC;AAChC;AASA,SAAS,oBAAoB,MAAM,QAAQ,EAAE,UAAU,OAAO,aAAa,MAAM,IAAI,CAAC,GAAG;AACxF,SAAO,IAAI,YAAY,MAAM,EAAE,QAAQ,SAAS,WAAW,CAAC;AAC7D;AAyBO,SAAS,wBAAwB;AACvC,QAAM,2BAA2B;AACjC,MAAI,6BAA6B,MAAM;AACtC,gCAA4B,uBAAuB;AAAA,EACpD;AAEA,SAAO,CAAC,MAAM,QAAQ,YAAY;AA9FnC;AA+FE,UAAM;AAAA;AAAA,OACL,8BAAyB,EAAE,aAA3B;AAAA;AAAA,QACuB;AAAA;AAAA;AAExB,QAAI,QAAQ;AACX,YAAM,YAAY,SAAS,MAAM,IAAI,OAAO,MAAM,IAAI,CAAC,MAAM;AAG7D,YAAM,QAAQ;AAAA;AAAA,QAA2C;AAAA,QAAO;AAAA,QAAQ;AAAA,MAAO;AAC/E,iBAAW,MAAM,WAAW;AAC3B,WAAG,KAAK,yBAAyB,GAAG,KAAK;AAAA,MAC1C;AACA,aAAO,CAAC,MAAM;AAAA,IACf;AAEA,WAAO;AAAA,EACR;AACD;AAeO,SAAS,aAAa,IAAI;AAChC,MAAI,sBAAsB,MAAM;AAC/B,gCAA4B,cAAc;AAAA,EAC3C;AAEA,MAAI,kBAAkB,MAAM,MAAM;AACjC,IAAE,sBAAsB,cAAc;AAAA,EACvC;AAEA,wBAAsB,iBAAiB,EAAE,EAAE,KAAK,EAAE;AACnD;AAaO,SAAS,YAAY,IAAI;AAC/B,MAAI,sBAAsB,MAAM;AAC/B,gCAA4B,aAAa;AAAA,EAC1C;AAEA,MAAI,kBAAkB,MAAM,MAAM;AACjC,IAAE,sBAAsB,aAAa;AAAA,EACtC;AAEA,wBAAsB,iBAAiB,EAAE,EAAE,KAAK,EAAE;AACnD;AAMA,SAAS,sBAAsB,SAAS;AACvC,MAAI;AAAA;AAAA,IAA2C,QAAS;AAAA;AACxD,SAAQ,EAAE,MAAF,EAAE,IAAM,EAAE,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE;AACvC;AAOO,SAAS,UAAU,IAAI;AAC7B,aAAW,EAAE;AACd;",
  "names": []
}
