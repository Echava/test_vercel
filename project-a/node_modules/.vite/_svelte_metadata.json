{"compilerOptions":{"css":"external","dev":true},"extensions":[".svelte"],"preprocess":{"name":"vite-preprocess","script":"async script({ attributes, content, filename = \"\" }) {\n      const lang = attributes.lang;\n      if (!supportedScriptLangs.includes(lang))\n        return;\n      const { code, map } = await transformWithEsbuild(content, filename, {\n        loader: lang,\n        target: \"esnext\",\n        tsconfigRaw: {\n          compilerOptions: {\n            importsNotUsedAsValues: \"preserve\",\n            preserveValueImports: !0\n          }\n        }\n      });\n      mapToRelative(map, filename);\n      return {\n        code,\n        map\n      };\n    }","style":"async ({ attributes, content, filename = \"\" }) => {\n    const ext = attributes.lang ? `.${attributes.lang}` : \".css\";\n    if (attributes.lang && !isCSSRequest(ext))\n      return;\n    if (!cssTransform)\n      cssTransform = createCssTransform(style, config).then((t) => cssTransform = t);\n    const transform = await cssTransform, suffix = `${lang_sep}${ext}`, moduleId = `${filename}${suffix}`, { code, map, deps } = await transform(content, moduleId);\n    removeLangSuffix(map, suffix);\n    mapToRelative(map, filename);\n    const dependencies = deps ? Array.from(deps).filter((d) => !d.endsWith(suffix)) : void 0;\n    return {\n      code,\n      map: map ?? void 0,\n      dependencies\n    };\n  }"}}